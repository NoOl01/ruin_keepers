import { useState } from "react"
import axios from "axios"
import { useNavigate } from "react-router-dom"
import {baseUrl} from "../BaseUrl.ts";
import AdminDashboard from "./AdminDashboard.tsx";

type Point = {
    name: string
    description: string
    number: number
    image?: File
}

export default function AdminCreateTour() {
    const [name, setName] = useState("")
    const [description, setDescription] = useState("")
    const [place, setPlace] = useState("")
    const [price, setPrice] = useState(0)
    const [maxMembers, setMaxMembers] = useState(10)
    const [image, setImage] = useState<File | null>(null)

    const [points, setPoints] = useState<Point[]>([])
    const [startAt, setStartAt] = useState("")
    const [endAt, setEndAt] = useState("")
    const [guide, setGuide] = useState("")

    const token = localStorage.getItem("token")
    const navigate = useNavigate()

    const handleAddPoint = () => {
        setPoints([...points, { name: "", description: "", number: points.length + 1 }])
    }

    const handleSubmit = async () => {
        try {
            // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–∞
            const tourRes = await axios.post(`${baseUrl}/api/v1/admin/tours/add`, {
                name,
                description,
                place,
                price,
                max_members: maxMembers,
                image: ""
            }, {
                headers: { Authorization: `Bearer ${token}` }
            })

            const tourId = tourRes.data?.result?.id;
            console.log("TOUR ID:", tourId)
            if (!tourId) throw new Error("Tour ID is missing")

            // 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—É—Ä–∞
            if (image) {
                const formData = new FormData()
                formData.append("image", image)
                await axios.post(`${baseUrl}/api/v1/admin/tours/uploadImage?tourId=${tourId}`, formData, {
                    headers: {
                        Authorization: `Bearer ${token}`,
                        "Content-Type": "multipart/form-data"
                    }
                })
            }

            const numericTourId = Number(tourId);

            if (!numericTourId || isNaN(numericTourId)) {
                console.error("‚ùå –û—à–∏–±–∫–∞: tour_id –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!", tourId);
                alert("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Ç—É—Ä–∞");
                return;
            }


            // 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏–Ω—Ç–æ–≤
            for (const point of points) {
                try {
                    console.log("üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∏–Ω—Ç–∞:", {
                        tour_id: Number(tourId),
                        name: point.name,
                        description: point.description,
                        number: point.number
                    })
                    const pointRes = await axios.post(`${baseUrl}/api/v1/admin/points/add`, {
                        tour_id: numericTourId, // <= —Å—é–¥–∞
                        name: point.name,
                        description: point.description,
                        number: point.number,
                        image: ""
                    }, {
                        headers: { Authorization: `Bearer ${token}` }
                    });

                    const pointId = pointRes.data?.id || pointRes.data?.result?.id;
                    console.log("POINT ID:", pointId);

                    if (point.image && pointId) {
                        const pointImg = new FormData()
                        pointImg.append("image", point.image)
                        await axios.post(`${baseUrl}/api/v1/admin/points/uploadImage?pointId=${pointId}`, pointImg, {
                            headers: {
                                Authorization: `Bearer ${token}`,
                                "Content-Type": "multipart/form-data"
                            }
                        })
                        console.log("TOUR RESPONSE:", tourRes.data);
                        console.log("TOUR ID:", tourId);
                    }
                } catch (err) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞", err);
                    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞");
                    return;
                }
            }

            // 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            try {
                await axios.post(`${baseUrl}/api/v1/admin/schedule/add`, {
                    tour_id: tourId,
                    start_at: new Date(startAt).toISOString(),
                    end_at: new Date(endAt).toISOString(),
                    guide: guide,
                }, {
                    headers: { Authorization: `Bearer ${token}` }
                })
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", err)
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                return
            }

            alert("–¢—É—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            navigate("/admin/dashboard")

        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–∞:", err)
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–∞")
        }
    }

    return (
        <div className="p-6 max-w-3xl mx-auto space-y-6">
            <h1 className="text-2xl font-bold">–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä</h1>

            <input className="input" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" value={name} onChange={e => setName(e.target.value)} />
            <textarea className="input" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ" value={description} onChange={e => setDescription(e.target.value)} />
            <input className="input" placeholder="–ú–µ—Å—Ç–æ" value={place} onChange={e => setPlace(e.target.value)} />
            <input className="input" type="number" placeholder="–¶–µ–Ω–∞" value={price} onChange={e => setPrice(+e.target.value)} />
            <input className="input" type="number" placeholder="–ú–∞–∫—Å. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" value={maxMembers} onChange={e => setMaxMembers(+e.target.value)} />
            <input className="input" type="file" onChange={(e) => setImage(e.target.files?.[0] || null)} />

            <h2 className="text-xl font-semibold">–¢–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞</h2>
            {points.map((point, idx) => (
                <div key={idx} className="border p-4 space-y-2">
                    <input className="input" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" value={point.name} onChange={e => {
                        const newPoints = [...points]
                        newPoints[idx].name = e.target.value
                        setPoints(newPoints)
                    }} />
                    <textarea className="input" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ" value={point.description} onChange={e => {
                        const newPoints = [...points]
                        newPoints[idx].description = e.target.value
                        setPoints(newPoints)
                    }} />
                    <input className="input" type="file" onChange={(e) => {
                        const newPoints = [...points]
                        newPoints[idx].image = e.target.files?.[0]
                        setPoints(newPoints)
                    }} />
                </div>
            ))}
            <button onClick={handleAddPoint} className="btn-secondary">+ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É</button>

            <h2 className="text-xl font-semibold">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h2>
            <input className="input" type="datetime-local" value={startAt} onChange={e => setStartAt(e.target.value)} />
            <input className="input" type="datetime-local" value={endAt} onChange={e => setEndAt(e.target.value)} />
            <input className="input" placeholder="–ì–∏–¥" value={guide} onChange={e => setGuide(e.target.value)} />

            <button className="btn-primary mt-4" onClick={handleSubmit}>–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä</button>
            <AdminDashboard></AdminDashboard>
        </div>
    )
}
